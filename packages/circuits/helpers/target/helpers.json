{"noir_version":"0.23.0+5be9f9d7e2f39ca228df10e5a530474af0331704","hash":2366104841608828462,"abi":{"parameters":[{"name":"input","type":{"kind":"array","length":7,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"input":[{"start":0,"end":7}]},"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[7]},"bytecode":"H4sIAAAAAAAA/92WSw6DMAxEJ39VqrrpRdIV297/VG2ELSaIHWZhLCGHII9fJoDSAASskWg8csMc+uwruZ+Lj6FWv4oxOGCMDhiTA8bsgLE4YKyGjMo2YvyP3jJ+/K+IOUbfdMFaYKu5VHvPO/sRySP1Q3OReVDmmpf4mI19DMSgunqfaf9u0rdX0TXUXJ6Y3/u6W0fBtq/tYE7rGmX+vkyN58NDkOZJYAvBgyC45gfUTIqemQgAAA==","debug_symbols":"tc1BCsMgEIXhu7y1FB11iF6ldCFtCoFgSnUn3r0tSCikmya4U3j/NwXzcg15WmKCL5Dw54L0CPHzSzk8MzxZKzDG2/vFXAXu0zzCa1cvAvLk/k/UjjNK/WqYW+L0dyE2w4FlWw6s1imZhlNPXB/Dyaw4bXHTE7ed8Fpf","file_map":{"24":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake3)]\npub fn blake3<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"39":{"source":"use dep::std;\nunconstrained fn hash(i: [Field; 7]) -> Field {\n    std::hash::pedersen_hash(i)\n}\n\n//If we wish to complicate the helpers here maybe we can be more creative? Or find a way to work with libraries\nfn main(input: [Field; 7]) -> pub Field {\n    hash(input)\n}\n\n#[test]\nfn test_main() {\n    println(main([1, 2, 0, 0, 0, 0, 0]));\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/Users/goblin/Workspace/gribi/packages/circuits/helpers/src/main.nr"}}}